{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction submitPost() {\n  var textarea = document.getElementById('comment');\n  var text = textarea.value;\n  var postIdInput = document.getElementById('postId');\n  var postId = postIdInput.value;\n  var data = {\n    comment: {\n      body: text\n    }\n  };\n  fetch(\"http://localhost:3000/api/v1/posts/\".concat(postId, \"/comments/create\"), {\n    method: 'POST',\n    // or 'PUT'\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log('Success:', data);\n    var newComment = document.createElement('p');\n    newComment.innerHTML = data.body;\n    postIdInput.before(newComment);\n    textarea.value = '';\n  })[\"catch\"](function (error) {\n    console.error('Error:', error);\n  });\n}\n\nfunction renderEditCommentForm(e) {\n  console.log(\"Test\");\n  e.preventDefault();\n  console.log(e.target.previousSibling.previousSibling);\n  var input = document.createElement('input');\n  input.type = 'text';\n  input.value = e.target.previousSibling.previousSibling.innerHTML;\n  e.target.after(input);\n  var submitButton = document.createElement('div');\n  submitButton.innerHTML = 'Update';\n  submitButton.addEventListener('click', updateComment);\n  input.after(submitButton);\n}\n\nfunction updateComment(e) {\n  var commentInput = e.target.previousSibling;\n  var commentId = e.target.previousSibling.previousSibling.dataset.id;\n  var data = {\n    comment: {\n      body: commentInput.value\n    }\n  };\n  fetch(\"http://localhost:3000/api/v1/comments/\".concat(commentId), {\n    method: 'POST',\n    // or 'PUT'\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log('Success:', data);\n  })[\"catch\"](function (error) {\n    console.error('Error:', error);\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var submitPostButton = document.getElementById('submitComment');\n  submitPostButton.addEventListener('click', submitPost);\n  var editCommentButtons = document.getElementsByClassName('editCommentButton');\n\n  var _iterator = _createForOfIteratorHelper(editCommentButtons),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var editCommentButton = _step.value;\n      editCommentButton.addEventListener('click', renderEditCommentForm);\n    } // GET request\n    // fetch('http://localhost:3000/posts.json')\n    //   .then((response) => response.json())\n    //   .then((data) => console.log(data))\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n});","map":{"version":3,"sources":["/Users/rubyshuler/Desktop/generative-art-main/app/javascript/packs/application.js"],"names":["submitPost","textarea","document","getElementById","text","value","postIdInput","postId","data","comment","body","fetch","method","headers","JSON","stringify","then","response","json","console","log","newComment","createElement","innerHTML","before","error","renderEditCommentForm","e","preventDefault","target","previousSibling","input","type","after","submitButton","addEventListener","updateComment","commentInput","commentId","dataset","id","submitPostButton","editCommentButtons","getElementsByClassName","editCommentButton"],"mappings":"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","sourcesContent":["function submitPost() {\n  const textarea = document.getElementById('comment')\n  const text = textarea.value\n  const postIdInput = document.getElementById('postId')\n  const postId = postIdInput.value\n\n  const data = {\n    comment: {\n      body: text\n    }\n  }\n\n  fetch(`http://localhost:3000/api/v1/posts/${postId}/comments/create`, {\n    method: 'POST', // or 'PUT'\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      console.log('Success:', data)\n\n      const newComment = document.createElement('p')\n      newComment.innerHTML = data.body\n      postIdInput.before(newComment)\n      textarea.value = ''\n    })\n    .catch((error) => {\n      console.error('Error:', error)\n    })\n}\n\nfunction renderEditCommentForm(e) {\n  console.log(\"Test\");\n  e.preventDefault()\n  console.log(e.target.previousSibling.previousSibling)\n\n  const input = document.createElement('input')\n  input.type = 'text'\n  input.value = e.target.previousSibling.previousSibling.innerHTML\n  e.target.after(input)\n\n  const submitButton = document.createElement('div')\n  submitButton.innerHTML = 'Update'\n  submitButton.addEventListener('click', updateComment)\n\n  input.after(submitButton)\n}\n\nfunction updateComment(e) {\n  const commentInput = e.target.previousSibling\n  const commentId = e.target.previousSibling.previousSibling.dataset.id\n\n  const data = {\n    comment: {\n      body: commentInput.value\n    }\n  }\n\n  fetch(`http://localhost:3000/api/v1/comments/${commentId}`, {\n    method: 'POST', // or 'PUT'\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      console.log('Success:', data)\n    })\n    .catch((error) => {\n      console.error('Error:', error)\n    })\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const submitPostButton = document.getElementById('submitComment')\n  submitPostButton.addEventListener('click', submitPost)\n\n  const editCommentButtons = document.getElementsByClassName(\n    'editCommentButton'\n  )\n\n  for (var editCommentButton of editCommentButtons) {\n    editCommentButton.addEventListener('click', renderEditCommentForm)\n  }\n\n  // GET request\n  // fetch('http://localhost:3000/posts.json')\n  //   .then((response) => response.json())\n  //   .then((data) => console.log(data))\n})\n"]},"metadata":{},"sourceType":"module"}